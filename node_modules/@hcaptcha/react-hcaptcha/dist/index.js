"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var React = require('react');

var _require = require("./utils.js"),
    generateQuery = _require.generateQuery; // Create script to init hCaptcha


var onLoadListeners = [];
var apiScriptRequested = false; // Generate hCaptcha API Script

var mountCaptchaScript = function mountCaptchaScript() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  apiScriptRequested = true; // Create global onload callback

  window.hcaptchaOnLoad = function () {
    // Iterate over onload listeners, call each listener
    onLoadListeners = onLoadListeners.filter(function (listener) {
      listener();
      return false;
    });
  };

  var domain = params.apihost || "https://hcaptcha.com";
  delete params.apihost;
  var script = document.createElement("script");
  script.src = "".concat(domain, "/1/api.js?render=explicit&onload=hcaptchaOnLoad");
  script.async = true;
  var query = generateQuery(params);
  script.src += query !== "" ? "&".concat(query) : "";
  document.head.appendChild(script);
};

var HCaptcha = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(HCaptcha, _React$Component);

  var _super = _createSuper(HCaptcha);

  function HCaptcha(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, HCaptcha);
    _this = _super.call(this, props); // API Methods

    _this.renderCaptcha = _this.renderCaptcha.bind((0, _assertThisInitialized2["default"])(_this));
    _this.resetCaptcha = _this.resetCaptcha.bind((0, _assertThisInitialized2["default"])(_this));
    _this.removeCaptcha = _this.removeCaptcha.bind((0, _assertThisInitialized2["default"])(_this)); // Event Handlers

    _this.handleOnLoad = _this.handleOnLoad.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleSubmit = _this.handleSubmit.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleExpire = _this.handleExpire.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleError = _this.handleError.bind((0, _assertThisInitialized2["default"])(_this));
    var isApiReady = typeof hcaptcha !== 'undefined';
    _this.ref = React.createRef();
    _this.state = {
      isApiReady: isApiReady,
      isRemoved: false,
      elementId: props.id,
      captchaId: ''
    };
    return _this;
  }

  (0, _createClass2["default"])(HCaptcha, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      //Once captcha is mounted intialize hCaptcha - hCaptcha
      var _this$props = this.props,
          apihost = _this$props.apihost,
          assethost = _this$props.assethost,
          endpoint = _this$props.endpoint,
          host = _this$props.host,
          imghost = _this$props.imghost,
          hl = _this$props.languageOverride,
          reCaptchaCompat = _this$props.reCaptchaCompat,
          reportapi = _this$props.reportapi,
          sentry = _this$props.sentry,
          custom = _this$props.custom;
      var isApiReady = this.state.isApiReady;

      if (!isApiReady) {
        //Check if hCaptcha has already been loaded, if not create script tag and wait to render captcha
        if (!apiScriptRequested) {
          // Only create the script tag once, use a global variable to track
          mountCaptchaScript({
            apihost: apihost,
            assethost: assethost,
            endpoint: endpoint,
            hl: hl,
            host: host,
            imghost: imghost,
            recaptchacompat: reCaptchaCompat === false ? "off" : null,
            reportapi: reportapi,
            sentry: sentry,
            custom: custom
          });
        } // Add onload callback to global onload listeners


        onLoadListeners.push(this.handleOnLoad);
      } else {
        this.renderCaptcha();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$state = this.state,
          isApiReady = _this$state.isApiReady,
          isRemoved = _this$state.isRemoved,
          captchaId = _this$state.captchaId;
      if (!isApiReady || isRemoved) return; // Reset any stored variables / timers when unmounting

      hcaptcha.reset(captchaId);
      hcaptcha.remove(captchaId);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      // Prevent component re-rendering when these internal state variables are updated
      if (this.state.isApiReady !== nextState.isApiReady || this.state.isRemoved !== nextState.isRemoved) {
        return false;
      }

      return true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      // Prop Keys that could change
      var keys = ['sitekey', 'size', 'theme', 'tabindex', 'languageOverride', 'endpoint']; // See if any props changed during component update

      var match = keys.every(function (key) {
        return prevProps[key] === _this2.props[key];
      }); // If they have changed, remove current captcha and render a new one

      if (!match) {
        this.removeCaptcha(function () {
          _this2.renderCaptcha();
        });
      }
    }
  }, {
    key: "renderCaptcha",
    value: function renderCaptcha(onReady) {
      var isApiReady = this.state.isApiReady;
      if (!isApiReady) return;
      var renderParams = Object.assign({
        "error-callback": this.handleError,
        "expired-callback": this.handleExpire,
        "callback": this.handleSubmit
      }, this.props, {
        hl: this.props.hl || this.props.languageOverride,
        languageOverride: undefined
      }); //Render hCaptcha widget and provide necessary callbacks - hCaptcha

      var captchaId = hcaptcha.render(this.ref.current, renderParams);
      this.setState({
        isRemoved: false,
        captchaId: captchaId
      }, function () {
        onReady && onReady();
      });
    }
  }, {
    key: "resetCaptcha",
    value: function resetCaptcha() {
      var _this$state2 = this.state,
          isApiReady = _this$state2.isApiReady,
          isRemoved = _this$state2.isRemoved,
          captchaId = _this$state2.captchaId;
      if (!isApiReady || isRemoved) return; // Reset captcha state, removes stored token and unticks checkbox

      hcaptcha.reset(captchaId);
    }
  }, {
    key: "removeCaptcha",
    value: function removeCaptcha(callback) {
      var _this$state3 = this.state,
          isApiReady = _this$state3.isApiReady,
          isRemoved = _this$state3.isRemoved,
          captchaId = _this$state3.captchaId;
      if (!isApiReady || isRemoved) return;
      this.setState({
        isRemoved: true
      }, function () {
        hcaptcha.remove(captchaId);
        callback && callback();
      });
    }
  }, {
    key: "handleOnLoad",
    value: function handleOnLoad() {
      var _this3 = this;

      this.setState({
        isApiReady: true
      }, function () {
        // render captcha and wait for captcha id
        _this3.renderCaptcha(function () {
          // trigger onLoad if it exists
          var onLoad = _this3.props.onLoad;
          if (onLoad) onLoad();
        });
      });
    }
  }, {
    key: "handleSubmit",
    value: function handleSubmit(event) {
      var onVerify = this.props.onVerify;
      var _this$state4 = this.state,
          isRemoved = _this$state4.isRemoved,
          captchaId = _this$state4.captchaId;
      if (typeof hcaptcha === 'undefined' || isRemoved) return;
      var token = hcaptcha.getResponse(captchaId); //Get response token from hCaptcha widget

      var ekey = hcaptcha.getRespKey(captchaId); //Get current challenge session id from hCaptcha widget

      onVerify(token, ekey); //Dispatch event to verify user response
    }
  }, {
    key: "handleExpire",
    value: function handleExpire() {
      var onExpire = this.props.onExpire;
      var _this$state5 = this.state,
          isApiReady = _this$state5.isApiReady,
          isRemoved = _this$state5.isRemoved,
          captchaId = _this$state5.captchaId;
      if (!isApiReady || isRemoved) return;
      hcaptcha.reset(captchaId); // If hCaptcha runs into error, reset captcha - hCaptcha

      if (onExpire) onExpire();
    }
  }, {
    key: "handleError",
    value: function handleError(event) {
      var onError = this.props.onError;
      var _this$state6 = this.state,
          isApiReady = _this$state6.isApiReady,
          isRemoved = _this$state6.isRemoved,
          captchaId = _this$state6.captchaId;
      if (!isApiReady || isRemoved) return;
      hcaptcha.reset(captchaId); // If hCaptcha runs into error, reset captcha - hCaptcha

      if (onError) onError(event);
    }
  }, {
    key: "execute",
    value: function execute() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var _this$state7 = this.state,
          isApiReady = _this$state7.isApiReady,
          isRemoved = _this$state7.isRemoved,
          captchaId = _this$state7.captchaId;
      if (!isApiReady || isRemoved) return;

      if (opts && (0, _typeof2["default"])(opts) !== "object") {
        opts = null;
      }

      return hcaptcha.execute(captchaId, opts);
    }
  }, {
    key: "render",
    value: function render() {
      var elementId = this.state.elementId;
      return /*#__PURE__*/React.createElement("div", {
        ref: this.ref,
        id: elementId
      });
    }
  }]);
  return HCaptcha;
}(React.Component);

module.exports = HCaptcha;