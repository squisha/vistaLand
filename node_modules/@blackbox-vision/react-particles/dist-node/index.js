'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var merge = _interopDefault(require('lodash.merge'));
var React = require('react');
var React__default = _interopDefault(React);

const getParams = () => merge({}, {
  particles: {
    number: {
      value: 40,
      max: -1,
      density: {
        enable: false,
        value_area: 1200
      }
    },
    color: {
      value: '#FFF'
    },
    shape: {
      type: 'circle',
      stroke: {
        width: 0,
        color: '#000000'
      },
      polygon: {
        nb_sides: 5
      },
      image: {
        src: '',
        width: 100,
        height: 100
      },
      images: []
    },
    opacity: {
      value: 0.5,
      random: false,
      anim: {
        enable: true,
        speed: 1,
        opacity_min: 0.1,
        sync: false
      }
    },
    size: {
      value: 1,
      random: false,
      anim: {
        enable: false,
        speed: 40,
        size_min: 0,
        sync: false
      }
    },
    line_linked: {
      enable: true,
      distance: 150,
      color: '#FFF',
      opacity: 0.6,
      width: 1,
      shadow: {
        enable: false,
        blur: 5,
        color: 'lime'
      }
    },
    move: {
      enable: true,
      speed: 3,
      direction: 'none',
      random: false,
      straight: false,
      out_mode: 'bounce',
      bounce: true,
      attract: {
        enable: false,
        rotateX: 3000,
        rotateY: 3000
      }
    },
    array: []
  },
  interactivity: {
    detect_on: 'canvas',
    events: {
      onhover: {
        enable: false,
        mode: 'grab'
      },
      onclick: {
        enable: false,
        mode: 'repulse'
      },
      resize: true
    },
    modes: {
      grab: {
        distance: 180,
        line_linked: {
          opacity: 0.35
        }
      },
      bubble: {
        distance: 200,
        size: 80,
        duration: 0.4
      },
      repulse: {
        distance: 100,
        duration: 5
      },
      push: {
        particles_nb: 4
      },
      remove: {
        particles_nb: 2
      }
    }
  },
  retina_detect: true,
  fps_limit: 999,
  polygon: {
    enable: false,
    scale: 1,
    type: 'inline',
    inline: {
      arrangement: 'one-per-point'
    },
    draw: {
      enable: false,
      stroke: {
        width: 0.5,
        color: 'rgba(255, 255, 255, .1)'
      }
    },
    move: {
      radius: 10,
      type: 'path'
    },
    url: ''
  }
});

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
class Particles extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "getParticles", () => {
      if (this.props.withDefaults) {
        return merge({}, getParams(), this.props.params);
      } else {
        return this.props.params;
      }
    });
  }

  componentDidMount() {
    require('particles.js');

    var w = window;

    if ('particlesJS' in w) {
      w.particlesJS(this.props.id, this.getParticles());
    }
  }

  componentDidUpdate(prevProps) {
    var w = window;

    if ('particlesJS' in w && prevProps.id !== this.props.id && prevProps.params !== this.props.params) {
      w.particlesJS(this.props.id, this.getParticles());
    }
  }

  componentWillUnmount() {
    var w = window;

    if ('pJSDom' in w && w.pJSDom instanceof Array && w.pJSDom.length > 0) {
      w.pJSDom.forEach(({
        pJS
      }) => pJS && pJS.fn.vendors.destroypJS());
      w.pJSDom = [];
    }
  }

  render() {
    const _this$props = this.props,
          className = _this$props.className,
          style = _this$props.style,
          width = _this$props.width,
          height = _this$props.height,
          id = _this$props.id;
    return React__default.createElement("div", {
      id: id,
      className: className,
      style: _objectSpread({}, style, {
        width: width,
        height: height
      })
    });
  }

}

_defineProperty(Particles, "displayName", 'Particles');

_defineProperty(Particles, "defaultProps", {
  style: {},
  width: 'auto',
  height: '100vh',
  id: 'particles-js',
  withDefaults: true
});

exports.Particles = Particles;
